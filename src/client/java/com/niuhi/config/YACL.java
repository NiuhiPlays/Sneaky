package com.niuhi.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.niuhi.SneakyMod;
import dev.isxander.yacl3.api.*;
import dev.isxander.yacl3.api.controller.FloatSliderControllerBuilder;
import dev.isxander.yacl3.api.controller.BooleanControllerBuilder;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.text.Text;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class YACL {
    private static final File CONFIG_FILE = new File(FabricLoader.getInstance().getConfigDir().toFile(), "SneakyMod-client.json");
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    private static Config config;

    public static void init() {
        loadConfig();
    }

    public static Screen createConfigScreen(Screen parent) {
        return YetAnotherConfigLib.createBuilder()
                .title(Text.literal("SneakyMod Config"))
                .category(ConfigCategory.createBuilder()
                        .name(Text.literal("View Cone"))
                        .tooltip(Text.literal("Settings for mob view cone detection"))
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("View Cone Settings"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Cone Angle"))
                                        .description(OptionDescription.of(Text.literal("Angle of the mob's view cone in degrees")))
                                        .binding(60.0f, () -> config.viewCone.coneAngle, val -> config.viewCone.coneAngle = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 180.0f).step(1.0f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Max Distance"))
                                        .description(OptionDescription.of(Text.literal("Maximum distance for view cone detection in blocks")))
                                        .binding(16.0f, () -> config.viewCone.maxDistance, val -> config.viewCone.maxDistance = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 64.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Proximity Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius in blocks where mobs always detect players")))
                                        .binding(1.0f, () -> config.viewCone.proximityRadius, val -> config.viewCone.proximityRadius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 5.0f).step(0.1f))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Hide in Tall Plants"))
                                        .description(OptionDescription.of(Text.literal("Hides sneaking players in tall plants from mob detection")))
                                        .binding(true, () -> config.viewCone.hideInTallPlants, val -> config.viewCone.hideInTallPlants = val)
                                        .controller(BooleanControllerBuilder::create)
                                        .build())
                                .build())
                        .build())
                .category(ConfigCategory.createBuilder()
                        .name(Text.literal("Stealth Detection"))
                        .tooltip(Text.literal("Settings for stealth-based mob detection"))
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Stealth Settings"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Sneak Multiplier"))
                                        .description(OptionDescription.of(Text.literal("Multiplier for detection chance when sneaking")))
                                        .binding(0.5f, () -> config.stealthDetection.sneakMultiplier, val -> config.stealthDetection.sneakMultiplier = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 1.0f).step(0.05f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Light Level Max Chance"))
                                        .description(OptionDescription.of(Text.literal("Detection chance at light level 15")))
                                        .binding(1.0f, () -> config.stealthDetection.lightLevelMaxChance, val -> config.stealthDetection.lightLevelMaxChance = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 1.0f).step(0.05f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Light Level Min Chance"))
                                        .description(OptionDescription.of(Text.literal("Detection chance at light level 0")))
                                        .binding(0.0f, () -> config.stealthDetection.lightLevelMinChance, val -> config.stealthDetection.lightLevelMinChance = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 1.0f).step(0.05f))
                                        .build())
                                .build())
                        .build())
                .category(ConfigCategory.createBuilder()
                        .name(Text.literal("Sound Detection"))
                        .tooltip(Text.literal("Settings for sound-based mob detection"))
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("General Settings"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Ambient Sound Multiplier"))
                                        .description(OptionDescription.of(Text.literal("Multiplier for sounds near ambient sources (e.g., water, portals)")))
                                        .binding(0.5f, () -> config.soundDetection.ambientSoundMultiplier, val -> config.soundDetection.ambientSoundMultiplier = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 1.0f).step(0.05f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Sound Cooldown"))
                                        .description(OptionDescription.of(Text.literal("Seconds before a mob can react to another sound")))
                                        .binding(2.0f, () -> config.soundDetection.soundCooldownSeconds, val -> config.soundDetection.soundCooldownSeconds = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 10.0f).step(0.1f))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Movement"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Default Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius in blocks for footstep sounds")))
                                        .binding(6.0f, () -> config.soundDetection.movement.defaultRadius, val -> config.soundDetection.movement.defaultRadius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Multiplier"))
                                        .description(OptionDescription.of(Text.literal("Multiplier for movement sound detection radius")))
                                        .binding(1.0f, () -> config.soundDetection.movement.multiplier, val -> config.soundDetection.movement.multiplier = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 2.0f).step(0.05f))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Item Use"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Multiplier"))
                                        .description(OptionDescription.of(Text.literal("Multiplier for item use sound detection radius")))
                                        .binding(1.0f, () -> config.soundDetection.use.multiplier, val -> config.soundDetection.use.multiplier = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 2.0f).step(0.05f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Ender Pearl Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for ender pearl use sound")))
                                        .binding(6.0f, () -> config.soundDetection.use.items.get("minecraft:ender_pearl").radius, val -> config.soundDetection.use.items.get("minecraft:ender_pearl").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Flint and Steel Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for flint and steel use sound")))
                                        .binding(6.0f, () -> config.soundDetection.use.items.get("minecraft:flint_and_steel").radius, val -> config.soundDetection.use.items.get("minecraft:flint_and_steel").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Goat Horn Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for goat horn use sound")))
                                        .binding(6.0f, () -> config.soundDetection.use.items.get("minecraft:goat_horn").radius, val -> config.soundDetection.use.items.get("minecraft:goat_horn").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Fire Charge Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for fire charge use sound")))
                                        .binding(6.0f, () -> config.soundDetection.use.items.get("minecraft:fire_charge").radius, val -> config.soundDetection.use.items.get("minecraft:fire_charge").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Block Interaction"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Multiplier"))
                                        .description(OptionDescription.of(Text.literal("Multiplier for block interaction sound detection radius")))
                                        .binding(1.0f, () -> config.soundDetection.interaction.multiplier, val -> config.soundDetection.interaction.multiplier = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 2.0f).step(0.05f))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Use Block Tags"))
                                        .description(OptionDescription.of(Text.literal("Enable tag-based block detection")))
                                        .binding(true, () -> config.soundDetection.interaction.useBlockTags, val -> config.soundDetection.interaction.useBlockTags = val)
                                        .controller(BooleanControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Doors Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for door interaction sound")))
                                        .binding(8.0f, () -> config.soundDetection.interaction.tagConfigs.get("minecraft:doors").radius, val -> config.soundDetection.interaction.tagConfigs.get("minecraft:doors").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Trapdoors Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for trapdoor interaction sound")))
                                        .binding(8.0f, () -> config.soundDetection.interaction.tagConfigs.get("minecraft:trapdoors").radius, val -> config.soundDetection.interaction.tagConfigs.get("minecraft:trapdoors").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Fence Gates Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for fence gate interaction sound")))
                                        .binding(8.0f, () -> config.soundDetection.interaction.tagConfigs.get("minecraft:fence_gates").radius, val -> config.soundDetection.interaction.tagConfigs.get("minecraft:fence_gates").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Buttons Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for button interaction sound")))
                                        .binding(4.0f, () -> config.soundDetection.interaction.tagConfigs.get("minecraft:buttons").radius, val -> config.soundDetection.interaction.tagConfigs.get("minecraft:buttons").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Pressure Plates Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for pressure plate interaction sound")))
                                        .binding(6.0f, () -> config.soundDetection.interaction.tagConfigs.get("minecraft:pressure_plates").radius, val -> config.soundDetection.interaction.tagConfigs.get("minecraft:pressure_plates").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Bell Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for bell interaction sound")))
                                        .binding(24.0f, () -> config.soundDetection.interaction.blocks.get("minecraft:bell").radius, val -> config.soundDetection.interaction.blocks.get("minecraft:bell").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 32.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Chest Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for chest interaction sound")))
                                        .binding(6.0f, () -> config.soundDetection.interaction.blocks.get("minecraft:chest").radius, val -> config.soundDetection.interaction.blocks.get("minecraft:chest").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Anvil Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for anvil interaction sound")))
                                        .binding(6.0f, () -> config.soundDetection.interaction.blocks.get("minecraft:anvil").radius, val -> config.soundDetection.interaction.blocks.get("minecraft:anvil").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Lever Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for lever interaction sound")))
                                        .binding(6.0f, () -> config.soundDetection.interaction.blocks.get("minecraft:lever").radius, val -> config.soundDetection.interaction.blocks.get("minecraft:lever").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Falling Blocks"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Multiplier"))
                                        .description(OptionDescription.of(Text.literal("Multiplier for falling block sound detection radius")))
                                        .binding(1.0f, () -> config.soundDetection.fallingBlock.multiplier, val -> config.soundDetection.fallingBlock.multiplier = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 2.0f).step(0.05f))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Use Block Tags"))
                                        .description(OptionDescription.of(Text.literal("Enable tag-based falling block detection")))
                                        .binding(true, () -> config.soundDetection.fallingBlock.useBlockTags, val -> config.soundDetection.fallingBlock.useBlockTags = val)
                                        .controller(BooleanControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Concrete Powder Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for concrete powder falling sound")))
                                        .binding(10.0f, () -> config.soundDetection.fallingBlock.tagConfigs.get("minecraft:concrete_powder").radius, val -> config.soundDetection.fallingBlock.tagConfigs.get("minecraft:concrete_powder").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Anvil Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for anvil falling sound")))
                                        .binding(10.0f, () -> config.soundDetection.fallingBlock.fallingBlocks.get("minecraft:anvil").radius, val -> config.soundDetection.fallingBlock.fallingBlocks.get("minecraft:anvil").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Pointed Dripstone Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for pointed dripstone falling sound")))
                                        .binding(10.0f, () -> config.soundDetection.fallingBlock.fallingBlocks.get("minecraft:pointed_dripstone").radius, val -> config.soundDetection.fallingBlock.fallingBlocks.get("minecraft:pointed_dripstone").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Gravel Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for gravel falling sound")))
                                        .binding(10.0f, () -> config.soundDetection.fallingBlock.fallingBlocks.get("minecraft:gravel").radius, val -> config.soundDetection.fallingBlock.fallingBlocks.get("minecraft:gravel").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Sand Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius for sand falling sound")))
                                        .binding(10.0f, () -> config.soundDetection.fallingBlock.fallingBlocks.get("minecraft:gravel").radius, val -> config.soundDetection.fallingBlock.fallingBlocks.get("minecraft:sand").radius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 16.0f).step(0.5f))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Projectiles"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Default Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius in blocks for projectile impact sounds")))
                                        .binding(12.0f, () -> config.soundDetection.projectile.defaultRadius, val -> config.soundDetection.projectile.defaultRadius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 32.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Multiplier"))
                                        .description(OptionDescription.of(Text.literal("Multiplier for projectile sound detection radius")))
                                        .binding(1.0f, () -> config.soundDetection.projectile.multiplier, val -> config.soundDetection.projectile.multiplier = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 2.0f).step(0.05f))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Explosions"))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Default Radius"))
                                        .description(OptionDescription.of(Text.literal("Radius in blocks for explosion sounds")))
                                        .binding(32.0f, () -> config.soundDetection.explosion.defaultRadius, val -> config.soundDetection.explosion.defaultRadius = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 64.0f).step(0.5f))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Multiplier"))
                                        .description(OptionDescription.of(Text.literal("Multiplier for explosion sound detection radius")))
                                        .binding(1.0f, () -> config.soundDetection.explosion.multiplier, val -> config.soundDetection.explosion.multiplier = val)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt).range(0.0f, 2.0f).step(0.05f))
                                        .build())
                                .build())
                        .build())
                .save(YACL::saveConfig)
                .build()
                .generateScreen(parent);
    }

    private static void loadConfig() {
        if (!CONFIG_FILE.exists()) {
            config = new Config();
            saveConfig();
            SneakyMod.LOGGER.info("Created default client config file: {}", CONFIG_FILE.getPath());
        } else {
            try (FileReader reader = new FileReader(CONFIG_FILE)) {
                config = GSON.fromJson(reader, Config.class);
                if (config == null) {
                    SneakyMod.LOGGER.warn("Client config file is empty, using defaults");
                    config = new Config();
                    saveConfig();
                }
            } catch (Exception e) {
                SneakyMod.LOGGER.error("Failed to load client config: {}", e.getMessage());
                config = new Config();
                saveConfig();
            }
        }
    }

    private static void saveConfig() {
        try (FileWriter writer = new FileWriter(CONFIG_FILE)) {
            GSON.toJson(config, writer);
            SneakyMod.LOGGER.info("Saved client config to {}", CONFIG_FILE.getPath());
        } catch (IOException e) {
            SneakyMod.LOGGER.error("Failed to save client config: {}", e.getMessage());
        }
    }
}